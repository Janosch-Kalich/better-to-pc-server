// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_2eproto;
namespace to_pc_server {
class RequestDoData;
struct RequestDoDataDefaultTypeInternal;
extern RequestDoDataDefaultTypeInternal _RequestDoData_default_instance_;
class RequestGetData;
struct RequestGetDataDefaultTypeInternal;
extern RequestGetDataDefaultTypeInternal _RequestGetData_default_instance_;
class RequestMessage;
struct RequestMessageDefaultTypeInternal;
extern RequestMessageDefaultTypeInternal _RequestMessage_default_instance_;
class RequestSetData;
struct RequestSetDataDefaultTypeInternal;
extern RequestSetDataDefaultTypeInternal _RequestSetData_default_instance_;
class ResponseMessage;
struct ResponseMessageDefaultTypeInternal;
extern ResponseMessageDefaultTypeInternal _ResponseMessage_default_instance_;
}  // namespace to_pc_server
PROTOBUF_NAMESPACE_OPEN
template<> ::to_pc_server::RequestDoData* Arena::CreateMaybeMessage<::to_pc_server::RequestDoData>(Arena*);
template<> ::to_pc_server::RequestGetData* Arena::CreateMaybeMessage<::to_pc_server::RequestGetData>(Arena*);
template<> ::to_pc_server::RequestMessage* Arena::CreateMaybeMessage<::to_pc_server::RequestMessage>(Arena*);
template<> ::to_pc_server::RequestSetData* Arena::CreateMaybeMessage<::to_pc_server::RequestSetData>(Arena*);
template<> ::to_pc_server::ResponseMessage* Arena::CreateMaybeMessage<::to_pc_server::ResponseMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace to_pc_server {

enum MessageType : int {
  GET = 0,
  SET = 1,
  DO = 2,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = GET;
constexpr MessageType MessageType_MAX = DO;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum Status : int {
  SUCCESS = 0,
  ERROR = 1,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = SUCCESS;
constexpr Status Status_MAX = ERROR;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class RequestGetData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:to_pc_server.RequestGetData) */ {
 public:
  inline RequestGetData() : RequestGetData(nullptr) {}
  ~RequestGetData() override;
  explicit PROTOBUF_CONSTEXPR RequestGetData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestGetData(const RequestGetData& from);
  RequestGetData(RequestGetData&& from) noexcept
    : RequestGetData() {
    *this = ::std::move(from);
  }

  inline RequestGetData& operator=(const RequestGetData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestGetData& operator=(RequestGetData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestGetData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestGetData* internal_default_instance() {
    return reinterpret_cast<const RequestGetData*>(
               &_RequestGetData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestGetData& a, RequestGetData& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestGetData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestGetData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestGetData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestGetData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestGetData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestGetData& from) {
    RequestGetData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestGetData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "to_pc_server.RequestGetData";
  }
  protected:
  explicit RequestGetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarFieldNumber = 1,
  };
  // string var = 1;
  void clear_var();
  const std::string& var() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var();
  PROTOBUF_NODISCARD std::string* release_var();
  void set_allocated_var(std::string* var);
  private:
  const std::string& _internal_var() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var(const std::string& value);
  std::string* _internal_mutable_var();
  public:

  // @@protoc_insertion_point(class_scope:to_pc_server.RequestGetData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class RequestSetData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:to_pc_server.RequestSetData) */ {
 public:
  inline RequestSetData() : RequestSetData(nullptr) {}
  ~RequestSetData() override;
  explicit PROTOBUF_CONSTEXPR RequestSetData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestSetData(const RequestSetData& from);
  RequestSetData(RequestSetData&& from) noexcept
    : RequestSetData() {
    *this = ::std::move(from);
  }

  inline RequestSetData& operator=(const RequestSetData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSetData& operator=(RequestSetData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestSetData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestSetData* internal_default_instance() {
    return reinterpret_cast<const RequestSetData*>(
               &_RequestSetData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestSetData& a, RequestSetData& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestSetData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestSetData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestSetData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestSetData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestSetData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestSetData& from) {
    RequestSetData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSetData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "to_pc_server.RequestSetData";
  }
  protected:
  explicit RequestSetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string var = 1;
  void clear_var();
  const std::string& var() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var();
  PROTOBUF_NODISCARD std::string* release_var();
  void set_allocated_var(std::string* var);
  private:
  const std::string& _internal_var() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var(const std::string& value);
  std::string* _internal_mutable_var();
  public:

  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:to_pc_server.RequestSetData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class RequestDoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:to_pc_server.RequestDoData) */ {
 public:
  inline RequestDoData() : RequestDoData(nullptr) {}
  ~RequestDoData() override;
  explicit PROTOBUF_CONSTEXPR RequestDoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestDoData(const RequestDoData& from);
  RequestDoData(RequestDoData&& from) noexcept
    : RequestDoData() {
    *this = ::std::move(from);
  }

  inline RequestDoData& operator=(const RequestDoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestDoData& operator=(RequestDoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestDoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestDoData* internal_default_instance() {
    return reinterpret_cast<const RequestDoData*>(
               &_RequestDoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestDoData& a, RequestDoData& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestDoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestDoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestDoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestDoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestDoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestDoData& from) {
    RequestDoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestDoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "to_pc_server.RequestDoData";
  }
  protected:
  explicit RequestDoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionIdFieldNumber = 1,
  };
  // string function_id = 1;
  void clear_function_id();
  const std::string& function_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function_id();
  PROTOBUF_NODISCARD std::string* release_function_id();
  void set_allocated_function_id(std::string* function_id);
  private:
  const std::string& _internal_function_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_id(const std::string& value);
  std::string* _internal_mutable_function_id();
  public:

  // @@protoc_insertion_point(class_scope:to_pc_server.RequestDoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class RequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:to_pc_server.RequestMessage) */ {
 public:
  inline RequestMessage() : RequestMessage(nullptr) {}
  ~RequestMessage() override;
  explicit PROTOBUF_CONSTEXPR RequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestMessage(const RequestMessage& from);
  RequestMessage(RequestMessage&& from) noexcept
    : RequestMessage() {
    *this = ::std::move(from);
  }

  inline RequestMessage& operator=(const RequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMessage& operator=(RequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestMessage& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kGetData = 2,
    kSetData = 3,
    kDoData = 4,
    DATA_NOT_SET = 0,
  };

  static inline const RequestMessage* internal_default_instance() {
    return reinterpret_cast<const RequestMessage*>(
               &_RequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestMessage& a, RequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestMessage& from) {
    RequestMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "to_pc_server.RequestMessage";
  }
  protected:
  explicit RequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kGetDataFieldNumber = 2,
    kSetDataFieldNumber = 3,
    kDoDataFieldNumber = 4,
  };
  // .to_pc_server.MessageType type = 1;
  void clear_type();
  ::to_pc_server::MessageType type() const;
  void set_type(::to_pc_server::MessageType value);
  private:
  ::to_pc_server::MessageType _internal_type() const;
  void _internal_set_type(::to_pc_server::MessageType value);
  public:

  // .to_pc_server.RequestGetData get_data = 2;
  bool has_get_data() const;
  private:
  bool _internal_has_get_data() const;
  public:
  void clear_get_data();
  const ::to_pc_server::RequestGetData& get_data() const;
  PROTOBUF_NODISCARD ::to_pc_server::RequestGetData* release_get_data();
  ::to_pc_server::RequestGetData* mutable_get_data();
  void set_allocated_get_data(::to_pc_server::RequestGetData* get_data);
  private:
  const ::to_pc_server::RequestGetData& _internal_get_data() const;
  ::to_pc_server::RequestGetData* _internal_mutable_get_data();
  public:
  void unsafe_arena_set_allocated_get_data(
      ::to_pc_server::RequestGetData* get_data);
  ::to_pc_server::RequestGetData* unsafe_arena_release_get_data();

  // .to_pc_server.RequestSetData set_data = 3;
  bool has_set_data() const;
  private:
  bool _internal_has_set_data() const;
  public:
  void clear_set_data();
  const ::to_pc_server::RequestSetData& set_data() const;
  PROTOBUF_NODISCARD ::to_pc_server::RequestSetData* release_set_data();
  ::to_pc_server::RequestSetData* mutable_set_data();
  void set_allocated_set_data(::to_pc_server::RequestSetData* set_data);
  private:
  const ::to_pc_server::RequestSetData& _internal_set_data() const;
  ::to_pc_server::RequestSetData* _internal_mutable_set_data();
  public:
  void unsafe_arena_set_allocated_set_data(
      ::to_pc_server::RequestSetData* set_data);
  ::to_pc_server::RequestSetData* unsafe_arena_release_set_data();

  // .to_pc_server.RequestDoData do_data = 4;
  bool has_do_data() const;
  private:
  bool _internal_has_do_data() const;
  public:
  void clear_do_data();
  const ::to_pc_server::RequestDoData& do_data() const;
  PROTOBUF_NODISCARD ::to_pc_server::RequestDoData* release_do_data();
  ::to_pc_server::RequestDoData* mutable_do_data();
  void set_allocated_do_data(::to_pc_server::RequestDoData* do_data);
  private:
  const ::to_pc_server::RequestDoData& _internal_do_data() const;
  ::to_pc_server::RequestDoData* _internal_mutable_do_data();
  public:
  void unsafe_arena_set_allocated_do_data(
      ::to_pc_server::RequestDoData* do_data);
  ::to_pc_server::RequestDoData* unsafe_arena_release_do_data();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:to_pc_server.RequestMessage)
 private:
  class _Internal;
  void set_has_get_data();
  void set_has_set_data();
  void set_has_do_data();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::to_pc_server::RequestGetData* get_data_;
      ::to_pc_server::RequestSetData* set_data_;
      ::to_pc_server::RequestDoData* do_data_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class ResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:to_pc_server.ResponseMessage) */ {
 public:
  inline ResponseMessage() : ResponseMessage(nullptr) {}
  ~ResponseMessage() override;
  explicit PROTOBUF_CONSTEXPR ResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseMessage(const ResponseMessage& from);
  ResponseMessage(ResponseMessage&& from) noexcept
    : ResponseMessage() {
    *this = ::std::move(from);
  }

  inline ResponseMessage& operator=(const ResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMessage& operator=(ResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseMessage*>(
               &_ResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResponseMessage& a, ResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseMessage& from) {
    ResponseMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "to_pc_server.ResponseMessage";
  }
  protected:
  explicit ResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .to_pc_server.Status status = 1;
  void clear_status();
  ::to_pc_server::Status status() const;
  void set_status(::to_pc_server::Status value);
  private:
  ::to_pc_server::Status _internal_status() const;
  void _internal_set_status(::to_pc_server::Status value);
  public:

  // @@protoc_insertion_point(class_scope:to_pc_server.ResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestGetData

// string var = 1;
inline void RequestGetData::clear_var() {
  _impl_.var_.ClearToEmpty();
}
inline const std::string& RequestGetData::var() const {
  // @@protoc_insertion_point(field_get:to_pc_server.RequestGetData.var)
  return _internal_var();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestGetData::set_var(ArgT0&& arg0, ArgT... args) {
 
 _impl_.var_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:to_pc_server.RequestGetData.var)
}
inline std::string* RequestGetData::mutable_var() {
  std::string* _s = _internal_mutable_var();
  // @@protoc_insertion_point(field_mutable:to_pc_server.RequestGetData.var)
  return _s;
}
inline const std::string& RequestGetData::_internal_var() const {
  return _impl_.var_.Get();
}
inline void RequestGetData::_internal_set_var(const std::string& value) {
  
  _impl_.var_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestGetData::_internal_mutable_var() {
  
  return _impl_.var_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestGetData::release_var() {
  // @@protoc_insertion_point(field_release:to_pc_server.RequestGetData.var)
  return _impl_.var_.Release();
}
inline void RequestGetData::set_allocated_var(std::string* var) {
  if (var != nullptr) {
    
  } else {
    
  }
  _impl_.var_.SetAllocated(var, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.var_.IsDefault()) {
    _impl_.var_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:to_pc_server.RequestGetData.var)
}

// -------------------------------------------------------------------

// RequestSetData

// string var = 1;
inline void RequestSetData::clear_var() {
  _impl_.var_.ClearToEmpty();
}
inline const std::string& RequestSetData::var() const {
  // @@protoc_insertion_point(field_get:to_pc_server.RequestSetData.var)
  return _internal_var();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestSetData::set_var(ArgT0&& arg0, ArgT... args) {
 
 _impl_.var_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:to_pc_server.RequestSetData.var)
}
inline std::string* RequestSetData::mutable_var() {
  std::string* _s = _internal_mutable_var();
  // @@protoc_insertion_point(field_mutable:to_pc_server.RequestSetData.var)
  return _s;
}
inline const std::string& RequestSetData::_internal_var() const {
  return _impl_.var_.Get();
}
inline void RequestSetData::_internal_set_var(const std::string& value) {
  
  _impl_.var_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestSetData::_internal_mutable_var() {
  
  return _impl_.var_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestSetData::release_var() {
  // @@protoc_insertion_point(field_release:to_pc_server.RequestSetData.var)
  return _impl_.var_.Release();
}
inline void RequestSetData::set_allocated_var(std::string* var) {
  if (var != nullptr) {
    
  } else {
    
  }
  _impl_.var_.SetAllocated(var, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.var_.IsDefault()) {
    _impl_.var_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:to_pc_server.RequestSetData.var)
}

// string data = 2;
inline void RequestSetData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RequestSetData::data() const {
  // @@protoc_insertion_point(field_get:to_pc_server.RequestSetData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestSetData::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:to_pc_server.RequestSetData.data)
}
inline std::string* RequestSetData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:to_pc_server.RequestSetData.data)
  return _s;
}
inline const std::string& RequestSetData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void RequestSetData::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestSetData::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestSetData::release_data() {
  // @@protoc_insertion_point(field_release:to_pc_server.RequestSetData.data)
  return _impl_.data_.Release();
}
inline void RequestSetData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:to_pc_server.RequestSetData.data)
}

// -------------------------------------------------------------------

// RequestDoData

// string function_id = 1;
inline void RequestDoData::clear_function_id() {
  _impl_.function_id_.ClearToEmpty();
}
inline const std::string& RequestDoData::function_id() const {
  // @@protoc_insertion_point(field_get:to_pc_server.RequestDoData.function_id)
  return _internal_function_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestDoData::set_function_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.function_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:to_pc_server.RequestDoData.function_id)
}
inline std::string* RequestDoData::mutable_function_id() {
  std::string* _s = _internal_mutable_function_id();
  // @@protoc_insertion_point(field_mutable:to_pc_server.RequestDoData.function_id)
  return _s;
}
inline const std::string& RequestDoData::_internal_function_id() const {
  return _impl_.function_id_.Get();
}
inline void RequestDoData::_internal_set_function_id(const std::string& value) {
  
  _impl_.function_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestDoData::_internal_mutable_function_id() {
  
  return _impl_.function_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestDoData::release_function_id() {
  // @@protoc_insertion_point(field_release:to_pc_server.RequestDoData.function_id)
  return _impl_.function_id_.Release();
}
inline void RequestDoData::set_allocated_function_id(std::string* function_id) {
  if (function_id != nullptr) {
    
  } else {
    
  }
  _impl_.function_id_.SetAllocated(function_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.function_id_.IsDefault()) {
    _impl_.function_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:to_pc_server.RequestDoData.function_id)
}

// -------------------------------------------------------------------

// RequestMessage

// .to_pc_server.MessageType type = 1;
inline void RequestMessage::clear_type() {
  _impl_.type_ = 0;
}
inline ::to_pc_server::MessageType RequestMessage::_internal_type() const {
  return static_cast< ::to_pc_server::MessageType >(_impl_.type_);
}
inline ::to_pc_server::MessageType RequestMessage::type() const {
  // @@protoc_insertion_point(field_get:to_pc_server.RequestMessage.type)
  return _internal_type();
}
inline void RequestMessage::_internal_set_type(::to_pc_server::MessageType value) {
  
  _impl_.type_ = value;
}
inline void RequestMessage::set_type(::to_pc_server::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:to_pc_server.RequestMessage.type)
}

// .to_pc_server.RequestGetData get_data = 2;
inline bool RequestMessage::_internal_has_get_data() const {
  return data_case() == kGetData;
}
inline bool RequestMessage::has_get_data() const {
  return _internal_has_get_data();
}
inline void RequestMessage::set_has_get_data() {
  _impl_._oneof_case_[0] = kGetData;
}
inline void RequestMessage::clear_get_data() {
  if (_internal_has_get_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.get_data_;
    }
    clear_has_data();
  }
}
inline ::to_pc_server::RequestGetData* RequestMessage::release_get_data() {
  // @@protoc_insertion_point(field_release:to_pc_server.RequestMessage.get_data)
  if (_internal_has_get_data()) {
    clear_has_data();
    ::to_pc_server::RequestGetData* temp = _impl_.data_.get_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.get_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::to_pc_server::RequestGetData& RequestMessage::_internal_get_data() const {
  return _internal_has_get_data()
      ? *_impl_.data_.get_data_
      : reinterpret_cast< ::to_pc_server::RequestGetData&>(::to_pc_server::_RequestGetData_default_instance_);
}
inline const ::to_pc_server::RequestGetData& RequestMessage::get_data() const {
  // @@protoc_insertion_point(field_get:to_pc_server.RequestMessage.get_data)
  return _internal_get_data();
}
inline ::to_pc_server::RequestGetData* RequestMessage::unsafe_arena_release_get_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:to_pc_server.RequestMessage.get_data)
  if (_internal_has_get_data()) {
    clear_has_data();
    ::to_pc_server::RequestGetData* temp = _impl_.data_.get_data_;
    _impl_.data_.get_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestMessage::unsafe_arena_set_allocated_get_data(::to_pc_server::RequestGetData* get_data) {
  clear_data();
  if (get_data) {
    set_has_get_data();
    _impl_.data_.get_data_ = get_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:to_pc_server.RequestMessage.get_data)
}
inline ::to_pc_server::RequestGetData* RequestMessage::_internal_mutable_get_data() {
  if (!_internal_has_get_data()) {
    clear_data();
    set_has_get_data();
    _impl_.data_.get_data_ = CreateMaybeMessage< ::to_pc_server::RequestGetData >(GetArenaForAllocation());
  }
  return _impl_.data_.get_data_;
}
inline ::to_pc_server::RequestGetData* RequestMessage::mutable_get_data() {
  ::to_pc_server::RequestGetData* _msg = _internal_mutable_get_data();
  // @@protoc_insertion_point(field_mutable:to_pc_server.RequestMessage.get_data)
  return _msg;
}

// .to_pc_server.RequestSetData set_data = 3;
inline bool RequestMessage::_internal_has_set_data() const {
  return data_case() == kSetData;
}
inline bool RequestMessage::has_set_data() const {
  return _internal_has_set_data();
}
inline void RequestMessage::set_has_set_data() {
  _impl_._oneof_case_[0] = kSetData;
}
inline void RequestMessage::clear_set_data() {
  if (_internal_has_set_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.set_data_;
    }
    clear_has_data();
  }
}
inline ::to_pc_server::RequestSetData* RequestMessage::release_set_data() {
  // @@protoc_insertion_point(field_release:to_pc_server.RequestMessage.set_data)
  if (_internal_has_set_data()) {
    clear_has_data();
    ::to_pc_server::RequestSetData* temp = _impl_.data_.set_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.set_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::to_pc_server::RequestSetData& RequestMessage::_internal_set_data() const {
  return _internal_has_set_data()
      ? *_impl_.data_.set_data_
      : reinterpret_cast< ::to_pc_server::RequestSetData&>(::to_pc_server::_RequestSetData_default_instance_);
}
inline const ::to_pc_server::RequestSetData& RequestMessage::set_data() const {
  // @@protoc_insertion_point(field_get:to_pc_server.RequestMessage.set_data)
  return _internal_set_data();
}
inline ::to_pc_server::RequestSetData* RequestMessage::unsafe_arena_release_set_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:to_pc_server.RequestMessage.set_data)
  if (_internal_has_set_data()) {
    clear_has_data();
    ::to_pc_server::RequestSetData* temp = _impl_.data_.set_data_;
    _impl_.data_.set_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestMessage::unsafe_arena_set_allocated_set_data(::to_pc_server::RequestSetData* set_data) {
  clear_data();
  if (set_data) {
    set_has_set_data();
    _impl_.data_.set_data_ = set_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:to_pc_server.RequestMessage.set_data)
}
inline ::to_pc_server::RequestSetData* RequestMessage::_internal_mutable_set_data() {
  if (!_internal_has_set_data()) {
    clear_data();
    set_has_set_data();
    _impl_.data_.set_data_ = CreateMaybeMessage< ::to_pc_server::RequestSetData >(GetArenaForAllocation());
  }
  return _impl_.data_.set_data_;
}
inline ::to_pc_server::RequestSetData* RequestMessage::mutable_set_data() {
  ::to_pc_server::RequestSetData* _msg = _internal_mutable_set_data();
  // @@protoc_insertion_point(field_mutable:to_pc_server.RequestMessage.set_data)
  return _msg;
}

// .to_pc_server.RequestDoData do_data = 4;
inline bool RequestMessage::_internal_has_do_data() const {
  return data_case() == kDoData;
}
inline bool RequestMessage::has_do_data() const {
  return _internal_has_do_data();
}
inline void RequestMessage::set_has_do_data() {
  _impl_._oneof_case_[0] = kDoData;
}
inline void RequestMessage::clear_do_data() {
  if (_internal_has_do_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.do_data_;
    }
    clear_has_data();
  }
}
inline ::to_pc_server::RequestDoData* RequestMessage::release_do_data() {
  // @@protoc_insertion_point(field_release:to_pc_server.RequestMessage.do_data)
  if (_internal_has_do_data()) {
    clear_has_data();
    ::to_pc_server::RequestDoData* temp = _impl_.data_.do_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.do_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::to_pc_server::RequestDoData& RequestMessage::_internal_do_data() const {
  return _internal_has_do_data()
      ? *_impl_.data_.do_data_
      : reinterpret_cast< ::to_pc_server::RequestDoData&>(::to_pc_server::_RequestDoData_default_instance_);
}
inline const ::to_pc_server::RequestDoData& RequestMessage::do_data() const {
  // @@protoc_insertion_point(field_get:to_pc_server.RequestMessage.do_data)
  return _internal_do_data();
}
inline ::to_pc_server::RequestDoData* RequestMessage::unsafe_arena_release_do_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:to_pc_server.RequestMessage.do_data)
  if (_internal_has_do_data()) {
    clear_has_data();
    ::to_pc_server::RequestDoData* temp = _impl_.data_.do_data_;
    _impl_.data_.do_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestMessage::unsafe_arena_set_allocated_do_data(::to_pc_server::RequestDoData* do_data) {
  clear_data();
  if (do_data) {
    set_has_do_data();
    _impl_.data_.do_data_ = do_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:to_pc_server.RequestMessage.do_data)
}
inline ::to_pc_server::RequestDoData* RequestMessage::_internal_mutable_do_data() {
  if (!_internal_has_do_data()) {
    clear_data();
    set_has_do_data();
    _impl_.data_.do_data_ = CreateMaybeMessage< ::to_pc_server::RequestDoData >(GetArenaForAllocation());
  }
  return _impl_.data_.do_data_;
}
inline ::to_pc_server::RequestDoData* RequestMessage::mutable_do_data() {
  ::to_pc_server::RequestDoData* _msg = _internal_mutable_do_data();
  // @@protoc_insertion_point(field_mutable:to_pc_server.RequestMessage.do_data)
  return _msg;
}

inline bool RequestMessage::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void RequestMessage::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline RequestMessage::DataCase RequestMessage::data_case() const {
  return RequestMessage::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseMessage

// .to_pc_server.Status status = 1;
inline void ResponseMessage::clear_status() {
  _impl_.status_ = 0;
}
inline ::to_pc_server::Status ResponseMessage::_internal_status() const {
  return static_cast< ::to_pc_server::Status >(_impl_.status_);
}
inline ::to_pc_server::Status ResponseMessage::status() const {
  // @@protoc_insertion_point(field_get:to_pc_server.ResponseMessage.status)
  return _internal_status();
}
inline void ResponseMessage::_internal_set_status(::to_pc_server::Status value) {
  
  _impl_.status_ = value;
}
inline void ResponseMessage::set_status(::to_pc_server::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:to_pc_server.ResponseMessage.status)
}

// string data = 2;
inline void ResponseMessage::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ResponseMessage::data() const {
  // @@protoc_insertion_point(field_get:to_pc_server.ResponseMessage.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMessage::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:to_pc_server.ResponseMessage.data)
}
inline std::string* ResponseMessage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:to_pc_server.ResponseMessage.data)
  return _s;
}
inline const std::string& ResponseMessage::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ResponseMessage::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ResponseMessage::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ResponseMessage::release_data() {
  // @@protoc_insertion_point(field_release:to_pc_server.ResponseMessage.data)
  return _impl_.data_.Release();
}
inline void ResponseMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:to_pc_server.ResponseMessage.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace to_pc_server

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::to_pc_server::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::to_pc_server::MessageType>() {
  return ::to_pc_server::MessageType_descriptor();
}
template <> struct is_proto_enum< ::to_pc_server::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::to_pc_server::Status>() {
  return ::to_pc_server::Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_2eproto
